{"version":3,"file":"urql-core.min.mjs","sources":["../src/utils/hash.ts","../src/utils/request.ts","../src/utils/typenames.ts","../src/utils/maskTypename.ts","../src/utils/withPromise.ts","../src/exchanges/ssr.ts","../src/exchanges/cache.ts","../src/exchanges/dedup.ts","../src/exchanges/fetch.ts","../src/exchanges/fallback.ts","../src/exchanges/compose.ts","../src/exchanges/index.ts","../src/client.ts","../src/exchanges/debug.ts","../src/exchanges/subscription.ts","../src/utils/toSuspenseSource.ts"],"sourcesContent":["// When we have separate strings it's useful to run a progressive\n// version of djb2 where we pretend that we're still looping over\n// the same string\nexport const phash = (h: number, x: string): number => {\n  h = h | 0;\n  for (let i = 0, l = x.length | 0; i < l; i++) {\n    h = (h << 5) + h + x.charCodeAt(i);\n  }\n\n  return h;\n};\n\n// This is a djb2 hashing function\nexport const hash = (x: string): number => phash(5381 | 0, x) >>> 0;\n","import { DocumentNode, parse, print } from 'graphql';\nimport { hash, phash } from './hash';\nimport { stringifyVariables } from './stringifyVariables';\nimport { GraphQLRequest, Operation, OperationContext } from '../types';\n\ninterface Documents {\n  [key: number]: DocumentNode;\n}\n\nconst hashQuery = (q: string): number => hash(q.replace(/[\\s,]+/g, ' ').trim());\n\nconst docs: Documents = Object.create(null);\nconst keyProp = '__key';\n\nexport const createRequest = (\n  q: string | DocumentNode,\n  vars?: object\n): GraphQLRequest => {\n  let key: number;\n  let query: DocumentNode;\n  if (typeof q === 'string') {\n    key = hashQuery(q);\n    query = docs[key] !== undefined ? docs[key] : parse(q);\n  } else if ((q as any)[keyProp] !== undefined) {\n    key = (q as any)[keyProp];\n    query = q;\n  } else {\n    key = hashQuery(print(q));\n    query = docs[key] !== undefined ? docs[key] : q;\n  }\n\n  docs[key] = query;\n  (query as any)[keyProp] = key;\n\n  return {\n    key: vars ? phash(key, stringifyVariables(vars)) >>> 0 : key,\n    query,\n    variables: vars || {},\n  };\n};\n\n/** Spreads the provided metadata to the source operation's meta property in context.  */\nexport const addMetadata = (\n  source: Operation,\n  meta: Exclude<OperationContext['meta'], undefined>\n) => ({\n  ...source,\n  context: {\n    ...source.context,\n    meta: {\n      ...source.context.meta,\n      ...meta,\n    },\n  },\n});\n","import {\n  DocumentNode,\n  FieldNode,\n  InlineFragmentNode,\n  SelectionNode,\n  Kind,\n  visit,\n} from 'graphql';\n\ninterface EntityLike {\n  [key: string]: EntityLike | EntityLike[] | any;\n  __typename: string | null | void;\n}\n\nconst collectTypes = (obj: EntityLike | EntityLike[], types: string[] = []) => {\n  if (Array.isArray(obj)) {\n    obj.forEach(inner => {\n      collectTypes(inner, types);\n    });\n  } else if (typeof obj === 'object' && obj !== null) {\n    for (const key in obj) {\n      if (key === '__typename' && typeof obj[key] === 'string') {\n        types.push(obj[key] as string);\n      } else {\n        collectTypes(obj[key], types);\n      }\n    }\n  }\n\n  return types;\n};\n\nexport const collectTypesFromResponse = (response: object) =>\n  collectTypes(response as EntityLike).filter((v, i, a) => a.indexOf(v) === i);\n\nconst formatNode = (node: FieldNode | InlineFragmentNode) => {\n  if (\n    node.selectionSet &&\n    !node.selectionSet.selections.some(\n      node => node.kind === Kind.FIELD && node.name.value === '__typename'\n    )\n  ) {\n    // NOTE: It's fine to mutate here as long as we return the node,\n    // which will instruct visit() to clone the AST upwards\n    (node.selectionSet.selections as SelectionNode[]).push({\n      kind: Kind.FIELD,\n      name: {\n        kind: Kind.NAME,\n        value: '__typename',\n      },\n    });\n\n    return node;\n  }\n};\n\nexport const formatDocument = (node: DocumentNode) => {\n  return visit(node, {\n    Field: formatNode,\n    InlineFragment: formatNode,\n  });\n};\n","export const maskTypename = (data: any): any => {\n  if (!data || typeof data !== 'object') return data;\n\n  return Object.keys(data).reduce((acc, key: string) => {\n    const value = data[key];\n    if (key === '__typename') {\n      Object.defineProperty(acc, '__typename', {\n        enumerable: false,\n        value,\n      });\n    } else if (Array.isArray(value)) {\n      acc[key] = value.map(maskTypename);\n    } else if (value && typeof value === 'object' && '__typename' in value) {\n      acc[key] = maskTypename(value);\n    } else {\n      acc[key] = value;\n    }\n\n    return acc;\n  }, {});\n};\n","import { Source, pipe, toPromise, take } from 'wonka';\nimport { PromisifiedSource } from '../types';\n\nexport function withPromise<T>(source$: Source<T>): PromisifiedSource<T> {\n  (source$ as PromisifiedSource<T>).toPromise = () =>\n    pipe(source$, take(1), toPromise);\n  return source$ as PromisifiedSource<T>;\n}\n","import { GraphQLError } from 'graphql';\nimport { pipe, share, filter, merge, map, tap } from 'wonka';\nimport { Exchange, OperationResult, Operation } from '../types';\nimport { CombinedError } from '../utils';\n\nexport interface SerializedResult {\n  data?: any;\n  error?: {\n    graphQLErrors: Array<Partial<GraphQLError> | string>;\n    networkError?: string;\n  };\n}\n\nexport interface SSRData {\n  [key: string]: SerializedResult;\n}\n\nexport interface SSRExchangeParams {\n  isClient?: boolean;\n  initialState?: SSRData;\n}\n\nexport interface SSRExchange extends Exchange {\n  /** Rehydrates cached data */\n  restoreData(data: SSRData): void;\n  /** Extracts cached data */\n  extractData(): SSRData;\n}\n\nconst shouldSkip = ({ operationName }: Operation) =>\n  operationName !== 'subscription' && operationName !== 'query';\n\n/** Serialize an OperationResult to plain JSON */\nconst serializeResult = ({\n  data,\n  error,\n}: OperationResult): SerializedResult => {\n  const result: SerializedResult = { data, error: undefined };\n  if (error) {\n    result.error = {\n      graphQLErrors: error.graphQLErrors.map(error => {\n        if (!error.path && !error.extensions) return error.message;\n\n        return {\n          message: error.message,\n          path: error.path,\n          extensions: error.extensions,\n        };\n      }),\n      networkError: error.networkError ? '' + error.networkError : undefined,\n    };\n  }\n\n  return result;\n};\n\n/** Deserialize plain JSON to an OperationResult */\nconst deserializeResult = (\n  operation: Operation,\n  result: SerializedResult\n): OperationResult => {\n  const { error, data } = result;\n  const deserialized: OperationResult = {\n    operation,\n    data,\n    extensions: undefined,\n    error: error\n      ? new CombinedError({\n          networkError: error.networkError\n            ? new Error(error.networkError)\n            : undefined,\n          graphQLErrors:\n            error.graphQLErrors && error.graphQLErrors.length\n              ? error.graphQLErrors\n              : undefined,\n        })\n      : undefined,\n  };\n\n  return deserialized;\n};\n\n/** The ssrExchange can be created to capture data during SSR and also to rehydrate it on the client */\nexport const ssrExchange = (params?: SSRExchangeParams): SSRExchange => {\n  const data: SSRData = {};\n\n  const isCached = (operation: Operation) => {\n    return !shouldSkip(operation) && data[operation.key] !== undefined;\n  };\n\n  // The SSR Exchange is a temporary cache that can populate results into data for suspense\n  // On the client it can be used to retrieve these temporary results from a rehydrated cache\n  const ssr: SSRExchange = ({ client, forward }) => ops$ => {\n    // params.isClient tells us whether we're on the client-side\n    // By default we assume that we're on the client if suspense-mode is disabled\n    const isClient =\n      params && typeof params.isClient === 'boolean'\n        ? !!params.isClient\n        : !client.suspense;\n\n    const sharedOps$ = share(ops$);\n\n    let forwardedOps$ = pipe(\n      sharedOps$,\n      filter(op => !isCached(op)),\n      forward\n    );\n\n    // NOTE: Since below we might delete the cached entry after accessing\n    // it once, cachedOps$ needs to be merged after forwardedOps$\n    let cachedOps$ = pipe(\n      sharedOps$,\n      filter(op => isCached(op)),\n      map(op => {\n        const serialized = data[op.key];\n        return deserializeResult(op, serialized);\n      })\n    );\n\n    if (!isClient) {\n      // On the server we cache results in the cache as they're resolved\n      forwardedOps$ = pipe(\n        forwardedOps$,\n        tap((result: OperationResult) => {\n          const { operation } = result;\n          if (!shouldSkip(operation)) {\n            const serialized = serializeResult(result);\n            data[operation.key] = serialized;\n          }\n        })\n      );\n    } else {\n      // On the client we delete results from the cache as they're resolved\n      cachedOps$ = pipe(\n        cachedOps$,\n        tap((result: OperationResult) => {\n          delete data[result.operation.key];\n        })\n      );\n    }\n\n    return merge([forwardedOps$, cachedOps$]);\n  };\n\n  ssr.restoreData = (restore: SSRData) => Object.assign(data, restore);\n  ssr.extractData = () => Object.assign({}, data);\n\n  if (params && params.initialState) {\n    ssr.restoreData(params.initialState);\n  }\n\n  return ssr;\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, map, merge, pipe, share, tap } from 'wonka';\n\nimport { Client } from '../client';\nimport { Exchange, Operation, OperationResult, ExchangeInput } from '../types';\nimport {\n  addMetadata,\n  collectTypesFromResponse,\n  formatDocument,\n} from '../utils';\n\ntype ResultCache = Map<number, OperationResult>;\n\ninterface OperationCache {\n  [key: string]: Set<number>;\n}\n\nconst shouldSkip = ({ operationName }: Operation) =>\n  operationName !== 'mutation' && operationName !== 'query';\n\nexport const cacheExchange: Exchange = ({ forward, client, dispatchDebug }) => {\n  const resultCache = new Map() as ResultCache;\n  const operationCache = Object.create(null) as OperationCache;\n\n  // Adds unique typenames to query (for invalidating cache entries)\n  const mapTypeNames = (operation: Operation): Operation => ({\n    ...operation,\n    query: formatDocument(operation.query),\n  });\n\n  const handleAfterMutation = afterMutation(\n    resultCache,\n    operationCache,\n    client,\n    dispatchDebug\n  );\n\n  const handleAfterQuery = afterQuery(resultCache, operationCache);\n\n  const isOperationCached = operation => {\n    const {\n      key,\n      operationName,\n      context: { requestPolicy },\n    } = operation;\n    return (\n      operationName === 'query' &&\n      requestPolicy !== 'network-only' &&\n      (requestPolicy === 'cache-only' || resultCache.has(key))\n    );\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n\n    const cachedOps$ = pipe(\n      sharedOps$,\n      filter(op => !shouldSkip(op) && isOperationCached(op)),\n      map(operation => {\n        const cachedResult = resultCache.get(operation.key);\n\n        dispatchDebug({\n          operation,\n          ...(cachedResult\n            ? {\n                type: 'cacheHit',\n                message: 'The result was successfully retried from the cache',\n              }\n            : {\n                type: 'cacheMiss',\n                message: 'The result could not be retrieved from the cache',\n              }),\n        });\n\n        const result: OperationResult = {\n          ...cachedResult,\n          operation: addMetadata(operation, {\n            cacheOutcome: cachedResult ? 'hit' : 'miss',\n          }),\n        };\n\n        if (operation.context.requestPolicy === 'cache-and-network') {\n          result.stale = true;\n          reexecuteOperation(client, operation);\n        }\n\n        return result;\n      })\n    );\n\n    const forwardedOps$ = pipe(\n      merge([\n        pipe(\n          sharedOps$,\n          filter(op => !shouldSkip(op) && !isOperationCached(op)),\n          map(mapTypeNames)\n        ),\n        pipe(\n          sharedOps$,\n          filter(op => shouldSkip(op))\n        ),\n      ]),\n      map(op => addMetadata(op, { cacheOutcome: 'miss' })),\n      filter(\n        op =>\n          op.operationName !== 'query' ||\n          op.context.requestPolicy !== 'cache-only'\n      ),\n      forward,\n      tap(response => {\n        if (\n          response.operation &&\n          response.operation.operationName === 'mutation'\n        ) {\n          handleAfterMutation(response);\n        } else if (\n          response.operation &&\n          response.operation.operationName === 'query'\n        ) {\n          handleAfterQuery(response);\n        }\n      })\n    );\n\n    return merge([cachedOps$, forwardedOps$]);\n  };\n};\n\n// Reexecutes a given operation with the default requestPolicy\nconst reexecuteOperation = (client: Client, operation: Operation) => {\n  return client.reexecuteOperation({\n    ...operation,\n    context: {\n      ...operation.context,\n      requestPolicy: 'network-only',\n    },\n  });\n};\n\n// Invalidates the cache given a mutation's response\nexport const afterMutation = (\n  resultCache: ResultCache,\n  operationCache: OperationCache,\n  client: Client,\n  dispatchDebug: ExchangeInput['dispatchDebug']\n) => (response: OperationResult) => {\n  const pendingOperations = new Set<number>();\n  const { additionalTypenames } = response.operation.context;\n\n  const typenames = [\n    ...collectTypesFromResponse(response.data),\n    ...(additionalTypenames || []),\n  ];\n\n  dispatchDebug({\n    type: 'cacheInvalidation',\n    message: `The following typenames have been invalidated: ${typenames}`,\n    operation: response.operation,\n    data: { typenames, response },\n  });\n\n  typenames.forEach(typeName => {\n    const operations =\n      operationCache[typeName] || (operationCache[typeName] = new Set());\n    operations.forEach(key => {\n      pendingOperations.add(key);\n    });\n    operations.clear();\n  });\n\n  pendingOperations.forEach(key => {\n    if (resultCache.has(key)) {\n      const operation = (resultCache.get(key) as OperationResult).operation;\n      resultCache.delete(key);\n      reexecuteOperation(client, operation);\n    }\n  });\n};\n\n// Mark typenames on typenameInvalidate for early invalidation\nconst afterQuery = (\n  resultCache: ResultCache,\n  operationCache: OperationCache\n) => (response: OperationResult) => {\n  const { operation, data, error } = response;\n  const { additionalTypenames } = operation.context;\n\n  if (data === undefined || data === null) {\n    return;\n  }\n\n  resultCache.set(operation.key, { operation, data, error });\n\n  [\n    ...collectTypesFromResponse(response.data),\n    ...(additionalTypenames || []),\n  ].forEach(typeName => {\n    const operations =\n      operationCache[typeName] || (operationCache[typeName] = new Set());\n    operations.add(operation.key);\n  });\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { Exchange, Operation, OperationResult } from '../types';\n\n/** A default exchange for debouncing GraphQL requests. */\nexport const dedupExchange: Exchange = ({ forward, dispatchDebug }) => {\n  const inFlightKeys = new Set<number>();\n\n  const filterIncomingOperation = (operation: Operation) => {\n    const { key, operationName } = operation;\n    if (operationName === 'teardown') {\n      inFlightKeys.delete(key);\n      return true;\n    }\n\n    if (operationName !== 'query' && operationName !== 'subscription') {\n      return true;\n    }\n\n    const isInFlight = inFlightKeys.has(key);\n    inFlightKeys.add(key);\n\n    if (isInFlight) {\n      dispatchDebug({\n        type: 'dedup',\n        message: 'An operation has been deduped.',\n        operation,\n      });\n    }\n\n    return !isInFlight;\n  };\n\n  const afterOperationResult = ({ operation }: OperationResult) => {\n    inFlightKeys.delete(operation.key);\n  };\n\n  return ops$ => {\n    const forward$ = pipe(ops$, filter(filterIncomingOperation));\n    return pipe(forward(forward$), tap(afterOperationResult));\n  };\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, merge, mergeMap, pipe, share, takeUntil, onPush } from 'wonka';\n\nimport { Exchange } from '../types';\nimport {\n  makeFetchBody,\n  makeFetchURL,\n  makeFetchOptions,\n  makeFetchSource,\n} from '../internal';\n\n/** A default exchange for fetching GraphQL requests. */\nexport const fetchExchange: Exchange = ({ forward, dispatchDebug }) => {\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const fetchResults$ = pipe(\n      sharedOps$,\n      filter(operation => {\n        return (\n          operation.operationName === 'query' ||\n          operation.operationName === 'mutation'\n        );\n      }),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.operationName === 'teardown' && op.key === key)\n        );\n\n        const body = makeFetchBody(operation);\n        const url = makeFetchURL(operation, body);\n        const fetchOptions = makeFetchOptions(operation, body);\n\n        dispatchDebug({\n          type: 'fetchRequest',\n          message: 'A fetch request is being executed.',\n          operation,\n          data: {\n            url,\n            fetchOptions,\n          },\n        });\n\n        return pipe(\n          makeFetchSource(operation, url, fetchOptions),\n          takeUntil(teardown$),\n          onPush(result => {\n            const error = !result.data ? result.error : undefined;\n\n            dispatchDebug({\n              type: error ? 'fetchError' : 'fetchSuccess',\n              message: `A ${\n                error ? 'failed' : 'successful'\n              } fetch response has been returned.`,\n              operation,\n              data: {\n                url,\n                fetchOptions,\n                value: error || result,\n              },\n            });\n          })\n        );\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(operation => {\n        return (\n          operation.operationName !== 'query' &&\n          operation.operationName !== 'mutation'\n        );\n      }),\n      forward\n    );\n\n    return merge([fetchResults$, forward$]);\n  };\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { Operation, ExchangeIO, ExchangeInput } from '../types';\nimport { noop } from '../utils';\n\n/** This is always the last exchange in the chain; No operation should ever reach it */\nexport const fallbackExchange: ({\n  dispatchDebug,\n}: Pick<ExchangeInput, 'dispatchDebug'>) => ExchangeIO = ({\n  dispatchDebug,\n}) => ops$ =>\n  pipe(\n    ops$,\n    tap<Operation>(operation => {\n      if (\n        operation.operationName !== 'teardown' &&\n        process.env.NODE_ENV !== 'production'\n      ) {\n        const message = `No exchange has handled operations of type \"${operation.operationName}\". Check whether you've added an exchange responsible for these operations.`;\n\n        dispatchDebug({\n          type: 'fallbackCatch',\n          message,\n          operation,\n        });\n        console.warn(message);\n      }\n    }),\n    /* All operations that skipped through the entire exchange chain should be filtered from the output */\n    filter<any>(() => false)\n  );\n\nexport const fallbackExchangeIO: ExchangeIO = fallbackExchange({\n  dispatchDebug: noop,\n});\n","import { Exchange, ExchangeInput } from '../types';\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeExchanges = (exchanges: Exchange[]) => ({\n  client,\n  forward,\n  dispatchDebug,\n}: ExchangeInput) =>\n  exchanges.reduceRight(\n    (forward, exchange) =>\n      exchange({\n        client,\n        forward,\n        dispatchDebug(event) {\n          dispatchDebug({\n            ...event,\n            timestamp: Date.now(),\n            source: exchange.name,\n          });\n        },\n      }),\n    forward\n  );\n","export { ssrExchange } from './ssr';\nexport { cacheExchange } from './cache';\nexport { subscriptionExchange } from './subscription';\nexport { debugExchange } from './debug';\nexport { dedupExchange } from './dedup';\nexport { fetchExchange } from './fetch';\nexport { fallbackExchangeIO } from './fallback';\nexport { composeExchanges } from './compose';\n\nimport { cacheExchange } from './cache';\nimport { dedupExchange } from './dedup';\nimport { fetchExchange } from './fetch';\n\nexport const defaultExchanges = [dedupExchange, cacheExchange, fetchExchange];\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport {\n  filter,\n  makeSubject,\n  onEnd,\n  onStart,\n  pipe,\n  share,\n  Source,\n  take,\n  takeUntil,\n  merge,\n  interval,\n  fromValue,\n  switchMap,\n  publish,\n  subscribe,\n  map,\n  Subscription,\n} from 'wonka';\n\nimport { composeExchanges, defaultExchanges } from './exchanges';\nimport { fallbackExchange } from './exchanges/fallback';\n\nimport {\n  Exchange,\n  ExchangeInput,\n  GraphQLRequest,\n  Operation,\n  OperationContext,\n  OperationResult,\n  OperationType,\n  RequestPolicy,\n  PromisifiedSource,\n  DebugEvent,\n} from './types';\n\nimport {\n  createRequest,\n  toSuspenseSource,\n  withPromise,\n  maskTypename,\n  noop,\n} from './utils';\n\nimport { DocumentNode } from 'graphql';\n\n/** Options for configuring the URQL [client]{@link Client}. */\nexport interface ClientOptions {\n  /** Target endpoint URL such as `https://my-target:8080/graphql`. */\n  url: string;\n  /** Any additional options to pass to fetch. */\n  fetchOptions?: RequestInit | (() => RequestInit);\n  /** An alternative fetch implementation. */\n  fetch?: typeof fetch;\n  /** An ordered array of Exchanges. */\n  exchanges?: Exchange[];\n  /** Activates support for Suspense. */\n  suspense?: boolean;\n  /** The default request policy for requests. */\n  requestPolicy?: RequestPolicy;\n  /** Use HTTP GET for queries. */\n  preferGetMethod?: boolean;\n  /** Mask __typename from results. */\n  maskTypename?: boolean;\n}\n\ninterface ActiveOperations {\n  [operationKey: string]: number;\n}\n\nexport const createClient = (opts: ClientOptions) => new Client(opts);\n\n/** The URQL application-wide client library. Each execute method starts a GraphQL request and returns a stream of results. */\nexport class Client {\n  // Event target for monitoring\n  subscribeToDebugTarget?: (onEvent: (e: DebugEvent) => void) => Subscription;\n\n  // These are variables derived from ClientOptions\n  url: string;\n  fetch?: typeof fetch;\n  fetchOptions?: RequestInit | (() => RequestInit);\n  suspense: boolean;\n  preferGetMethod: boolean;\n  requestPolicy: RequestPolicy;\n  maskTypename: boolean;\n\n  // These are internals to be used to keep track of operations\n  dispatchOperation: (operation?: Operation) => void;\n  operations$: Source<Operation>;\n  results$: Source<OperationResult>;\n  activeOperations = Object.create(null) as ActiveOperations;\n  queue: Operation[] = [];\n\n  constructor(opts: ClientOptions) {\n    if (process.env.NODE_ENV !== 'production' && !opts.url) {\n      throw new Error('You are creating an urql-client without a url.');\n    }\n\n    let dispatchDebug: ExchangeInput['dispatchDebug'] = noop;\n    if (process.env.NODE_ENV !== 'production') {\n      const { next, source } = makeSubject<DebugEvent>();\n      this.subscribeToDebugTarget = (onEvent: (e: DebugEvent) => void) =>\n        pipe(source, subscribe(onEvent));\n      dispatchDebug = next as ExchangeInput['dispatchDebug'];\n    }\n\n    this.url = opts.url;\n    this.fetchOptions = opts.fetchOptions;\n    this.fetch = opts.fetch;\n    this.suspense = !!opts.suspense;\n    this.requestPolicy = opts.requestPolicy || 'cache-first';\n    this.preferGetMethod = !!opts.preferGetMethod;\n    this.maskTypename = !!opts.maskTypename;\n\n    // This subject forms the input of operations; executeOperation may be\n    // called to dispatch a new operation on the subject\n    const { source: operations$, next: nextOperation } = makeSubject<\n      Operation\n    >();\n    this.operations$ = operations$;\n\n    let isDispatching = false;\n    this.dispatchOperation = (operation?: Operation) => {\n      if (!isDispatching) {\n        isDispatching = true;\n        if (operation) nextOperation(operation);\n        let queued: Operation | void;\n        while ((queued = this.queue.shift())) nextOperation(queued);\n        isDispatching = false;\n      } else if (operation) {\n        nextOperation(operation);\n      }\n    };\n\n    const exchanges =\n      opts.exchanges !== undefined ? opts.exchanges : defaultExchanges;\n\n    // All exchange are composed into a single one and are called using the constructed client\n    // and the fallback exchange stream\n    const composedExchange = composeExchanges(exchanges);\n\n    // All exchanges receive inputs using which they can forward operations to the next exchange\n    // and receive a stream of results in return, access the client, or dispatch debugging events\n    // All operations then run through the Exchange IOs in a pipeline-like fashion\n    this.results$ = share(\n      composedExchange({\n        client: this,\n        dispatchDebug,\n        forward: fallbackExchange({ dispatchDebug }),\n      })(this.operations$)\n    );\n\n    // Prevent the `results$` exchange pipeline from being closed by active\n    // cancellations cascading up from components\n    pipe(this.results$, publish);\n  }\n\n  private createOperationContext = (\n    opts?: Partial<OperationContext>\n  ): OperationContext => ({\n    url: this.url,\n    fetchOptions: this.fetchOptions,\n    fetch: this.fetch,\n    preferGetMethod: this.preferGetMethod,\n    ...opts,\n    requestPolicy: (opts || {}).requestPolicy || this.requestPolicy,\n  });\n\n  createRequestOperation = (\n    type: OperationType,\n    request: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Operation => ({\n    key: request.key,\n    query: request.query,\n    variables: request.variables,\n    operationName: type,\n    context: this.createOperationContext(opts),\n  });\n\n  /** Counts up the active operation key and dispatches the operation */\n  private onOperationStart(operation: Operation) {\n    const { key } = operation;\n    this.activeOperations[key] = (this.activeOperations[key] || 0) + 1;\n    this.dispatchOperation(operation);\n  }\n\n  /** Deletes an active operation's result observable and sends a teardown signal through the exchange pipeline */\n  private onOperationEnd(operation: Operation) {\n    const { key } = operation;\n    const prevActive = this.activeOperations[key] || 0;\n    const newActive = (this.activeOperations[key] =\n      prevActive <= 0 ? 0 : prevActive - 1);\n\n    if (newActive <= 0) {\n      this.dispatchOperation({ ...operation, operationName: 'teardown' });\n    }\n  }\n\n  /** Executes an Operation by sending it through the exchange pipeline It returns an observable that emits all related exchange results and keeps track of this observable's subscribers. A teardown signal will be emitted when no subscribers are listening anymore. */\n  executeRequestOperation(operation: Operation): Source<OperationResult> {\n    const { key, operationName } = operation;\n    let operationResults$ = pipe(\n      this.results$,\n      filter((res: OperationResult) => res.operation.key === key)\n    );\n\n    if (this.maskTypename) {\n      operationResults$ = pipe(\n        operationResults$,\n        map(res => {\n          res.data = maskTypename(res.data);\n          return res;\n        })\n      );\n    }\n\n    if (operationName === 'mutation') {\n      // A mutation is always limited to just a single result and is never shared\n      return pipe(\n        operationResults$,\n        onStart<OperationResult>(() => this.dispatchOperation(operation)),\n        take(1)\n      );\n    }\n\n    const teardown$ = pipe(\n      this.operations$,\n      filter(\n        (op: Operation) => op.operationName === 'teardown' && op.key === key\n      )\n    );\n\n    const result$ = pipe(\n      operationResults$,\n      takeUntil(teardown$),\n      onStart<OperationResult>(() => {\n        this.onOperationStart(operation);\n      }),\n      onEnd<OperationResult>(() => {\n        this.onOperationEnd(operation);\n      })\n    );\n\n    return operation.context.suspense !== false &&\n      this.suspense &&\n      operationName === 'query'\n      ? toSuspenseSource<OperationResult>(result$ as Source<OperationResult>)\n      : (result$ as Source<OperationResult>);\n  }\n\n  reexecuteOperation = (operation: Operation) => {\n    // Reexecute operation only if any subscribers are still subscribed to the\n    // operation's exchange results\n    if ((this.activeOperations[operation.key] || 0) > 0) {\n      this.queue.push(operation);\n      this.dispatchOperation();\n    }\n  };\n\n  query<Data = any, Variables extends object = {}>(\n    query: DocumentNode | string,\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ): PromisifiedSource<OperationResult<Data>> {\n    if (!context || typeof context.suspense !== 'boolean') {\n      context = { ...context, suspense: false };\n    }\n\n    return withPromise<OperationResult<Data>>(\n      this.executeQuery(createRequest(query, variables), context)\n    );\n  }\n\n  readQuery<Data = any, Variables extends object = {}>(\n    query: DocumentNode | string,\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResult<Data> | null {\n    let result: OperationResult<Data> | null = null;\n\n    pipe(\n      this.executeQuery(createRequest(query, variables), context),\n      subscribe(res => {\n        result = res;\n      })\n    ).unsubscribe();\n\n    return result;\n  }\n\n  executeQuery = <Data = any>(\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult<Data>> => {\n    const operation = this.createRequestOperation('query', query, opts);\n    const response$ = this.executeRequestOperation(operation);\n    const { pollInterval } = operation.context;\n\n    if (pollInterval) {\n      return pipe(\n        merge([fromValue(0), interval(pollInterval)]),\n        switchMap(() => response$)\n      );\n    }\n\n    return response$;\n  };\n\n  executeSubscription = (\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult> => {\n    const operation = this.createRequestOperation('subscription', query, opts);\n    return this.executeRequestOperation(operation);\n  };\n\n  mutation<Data = any, Variables extends object = {}>(\n    query: DocumentNode | string,\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ): PromisifiedSource<OperationResult<Data>> {\n    return withPromise<OperationResult<Data>>(\n      this.executeMutation(createRequest(query, variables), context)\n    );\n  }\n\n  executeMutation = <Data = any>(\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult<Data>> => {\n    const operation = this.createRequestOperation('mutation', query, opts);\n    return this.executeRequestOperation(operation);\n  };\n}\n","import { pipe, tap } from 'wonka';\nimport { Exchange } from '../types';\n\nexport const debugExchange: Exchange = ({ forward }) => {\n  if (process.env.NODE_ENV === 'production') {\n    return ops$ => forward(ops$);\n  } else {\n    return ops$ =>\n      pipe(\n        ops$,\n        // eslint-disable-next-line no-console\n        tap(op => console.log('[Exchange debug]: Incoming operation: ', op)),\n        forward,\n        tap(result =>\n          // eslint-disable-next-line no-console\n          console.log('[Exchange debug]: Completed operation: ', result)\n        )\n      );\n  }\n};\n","import { print } from 'graphql';\n\nimport {\n  filter,\n  make,\n  merge,\n  mergeMap,\n  pipe,\n  share,\n  Source,\n  takeUntil,\n} from 'wonka';\n\nimport { makeResult, makeErrorResult } from '../utils';\n\nimport {\n  Exchange,\n  ExecutionResult,\n  Operation,\n  OperationContext,\n  OperationResult,\n} from '../types';\n\nexport interface ObserverLike<T> {\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\n/** An abstract observable interface conforming to: https://github.com/tc39/proposal-observable */\nexport interface ObservableLike<T> {\n  subscribe(\n    observer: ObserverLike<T>\n  ): {\n    unsubscribe: () => void;\n  };\n}\n\nexport interface SubscriptionOperation {\n  query: string;\n  variables?: object;\n  key: string;\n  context: OperationContext;\n}\n\nexport type SubscriptionForwarder = (\n  operation: SubscriptionOperation\n) => ObservableLike<ExecutionResult & { extensions?: Record<string, any> }>;\n\n/** This is called to create a subscription and needs to be hooked up to a transport client. */\nexport interface SubscriptionExchangeOpts {\n  // This has been modelled to work with subscription-transport-ws\n  // See: https://github.com/apollographql/subscriptions-transport-ws#requestoptions--observableexecutionresult-returns-observable-to-execute-the-operation\n  forwardSubscription: SubscriptionForwarder;\n\n  /** This flag may be turned on to allow your subscriptions-transport to handle all operation types */\n  enableAllOperations?: boolean;\n}\n\nexport const subscriptionExchange = ({\n  forwardSubscription,\n  enableAllOperations,\n}: SubscriptionExchangeOpts): Exchange => ({ client, forward }) => {\n  const createSubscriptionSource = (\n    operation: Operation\n  ): Source<OperationResult> => {\n    // This excludes the query's name as a field although subscription-transport-ws does accept it since it's optional\n    const observableish = forwardSubscription({\n      key: operation.key.toString(36),\n      query: print(operation.query),\n      variables: operation.variables,\n      context: { ...operation.context },\n    });\n\n    return make<OperationResult>(({ next, complete }) => {\n      let isComplete = false;\n      let sub;\n\n      Promise.resolve().then(() => {\n        if (isComplete) return;\n\n        sub = observableish.subscribe({\n          next: result => next(makeResult(operation, result)),\n          error: err => next(makeErrorResult(operation, err)),\n          complete: () => {\n            if (!isComplete) {\n              isComplete = true;\n              if (operation.operationName === 'subscription') {\n                client.reexecuteOperation({\n                  ...operation,\n                  operationName: 'teardown',\n                });\n              }\n\n              complete();\n            }\n          },\n        });\n      });\n\n      return () => {\n        isComplete = true;\n        if (sub) sub.unsubscribe();\n      };\n    });\n  };\n\n  const isSubscriptionOperation = (operation: Operation): boolean => {\n    const { operationName } = operation;\n    return (\n      operationName === 'subscription' ||\n      (!!enableAllOperations &&\n        (operationName === 'query' || operationName === 'mutation'))\n    );\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const subscriptionResults$ = pipe(\n      sharedOps$,\n      filter(isSubscriptionOperation),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.operationName === 'teardown' && op.key === key)\n        );\n\n        return pipe(createSubscriptionSource(operation), takeUntil(teardown$));\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(op => !isSubscriptionOperation(op)),\n      forward\n    );\n\n    return merge([subscriptionResults$, forward$]);\n  };\n};\n","import { pipe, share, onPush, toPromise, takeWhile, take, Source } from 'wonka';\n\n/** This converts a Source to a suspense Source; It will forward the first result synchronously or throw a promise that resolves when the result becomes available */\nexport const toSuspenseSource = <T>(source: Source<T>): Source<T> => sink => {\n  const shared = share(source);\n  let hasResult = false;\n  let hasSuspended = false;\n\n  pipe(\n    shared,\n    takeWhile(() => !hasSuspended),\n    onPush(() => (hasResult = true))\n  )(sink);\n\n  if (!hasResult) {\n    hasSuspended = true;\n    sink(0); /* End */\n    throw pipe(shared, take(1), toPromise);\n  }\n};\n"],"names":["h","x","i","l","const","docs","Object","q","vars","key","phash","undefined","parse","print","query","stringifyVariables","variables","source","meta","_extends","context","obj","types","Array","inner","collectTypes","v","a","node","Kind","kind","name","value","visit","Field","formatNode","InlineFragment","data","acc","enumerable","maskTypename","source$","toPromise","take","operationName","error","message","path","extensions","operation","formatDocument","op","addMetadata","cacheOutcome","shouldSkip","requestPolicy","resultCache","cachedResult","result","reexecuteOperation","client","isOperationCached","response","handleAfterMutation","handleAfterQuery","Map","operationCache","pendingOperations","Set","additionalTypenames","typeName","afterMutation","afterQuery","ops$","sharedOps$","share","map","filter","tap","forward","merge","cachedOps$","forwardedOps$","inFlightKeys","isInFlight","filterIncomingOperation","afterOperationResult","forward$","mergeMap","teardown$","body","makeFetchBody","url","makeFetchURL","makeFetchOptions","onPush","takeUntil","makeFetchSource","fetchOptions","fetchResults$","fallbackExchangeIO","fallbackExchange","exchanges","exchange","dispatchDebug","defaultExchanges","dedupExchange","cacheExchange","fetchExchange","Client","opts","this","fetch","preferGetMethod","type","request","response$","switchMap","fromValue","interval","pollInterval","makeSubject","isDispatching","nextOperation","queued","composeExchanges","composedExchange","noop","res","isClient","params","isCached","serialized","deserialized","CombinedError","networkError","Error","graphQLErrors","restore","ssr","enableAllOperations","observableish","forwardSubscription","make","next","makeResult","err","makeErrorResult","isComplete","complete","sub","isSubscriptionOperation","createSubscriptionSource","subscriptionResults$","prevActive","operationResults$","onStart","onEnd","sink","shared","hasResult","hasSuspended","takeWhile","toSuspenseSource","result$","suspense","withPromise","createRequest"],"mappings":"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"}