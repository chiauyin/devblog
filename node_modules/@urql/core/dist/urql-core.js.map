{"version":3,"file":"urql-core.js","sources":["../src/utils/hash.ts","../src/utils/request.ts","../src/utils/typenames.ts","../src/utils/maskTypename.ts","../src/utils/withPromise.ts","../src/utils/index.ts","../src/exchanges/ssr.ts","../src/exchanges/cache.ts","../src/exchanges/debug.ts","../src/exchanges/dedup.ts","../src/exchanges/fetch.ts","../src/exchanges/fallback.ts","../src/exchanges/compose.ts","../src/exchanges/index.ts","../src/client.ts","../src/utils/toSuspenseSource.ts","../src/exchanges/subscription.ts"],"sourcesContent":["// When we have separate strings it's useful to run a progressive\n// version of djb2 where we pretend that we're still looping over\n// the same string\nexport const phash = (h: number, x: string): number => {\n  h = h | 0;\n  for (let i = 0, l = x.length | 0; i < l; i++) {\n    h = (h << 5) + h + x.charCodeAt(i);\n  }\n\n  return h;\n};\n\n// This is a djb2 hashing function\nexport const hash = (x: string): number => phash(5381 | 0, x) >>> 0;\n","import { DocumentNode, parse, print } from 'graphql';\nimport { hash, phash } from './hash';\nimport { stringifyVariables } from './stringifyVariables';\nimport { GraphQLRequest, Operation, OperationContext } from '../types';\n\ninterface Documents {\n  [key: number]: DocumentNode;\n}\n\nconst hashQuery = (q: string): number => hash(q.replace(/[\\s,]+/g, ' ').trim());\n\nconst docs: Documents = Object.create(null);\nconst keyProp = '__key';\n\nexport const createRequest = (\n  q: string | DocumentNode,\n  vars?: object\n): GraphQLRequest => {\n  let key: number;\n  let query: DocumentNode;\n  if (typeof q === 'string') {\n    key = hashQuery(q);\n    query = docs[key] !== undefined ? docs[key] : parse(q);\n  } else if ((q as any)[keyProp] !== undefined) {\n    key = (q as any)[keyProp];\n    query = q;\n  } else {\n    key = hashQuery(print(q));\n    query = docs[key] !== undefined ? docs[key] : q;\n  }\n\n  docs[key] = query;\n  (query as any)[keyProp] = key;\n\n  return {\n    key: vars ? phash(key, stringifyVariables(vars)) >>> 0 : key,\n    query,\n    variables: vars || {},\n  };\n};\n\n/** Spreads the provided metadata to the source operation's meta property in context.  */\nexport const addMetadata = (\n  source: Operation,\n  meta: Exclude<OperationContext['meta'], undefined>\n) => ({\n  ...source,\n  context: {\n    ...source.context,\n    meta: {\n      ...source.context.meta,\n      ...meta,\n    },\n  },\n});\n","import {\n  DocumentNode,\n  FieldNode,\n  InlineFragmentNode,\n  SelectionNode,\n  Kind,\n  visit,\n} from 'graphql';\n\ninterface EntityLike {\n  [key: string]: EntityLike | EntityLike[] | any;\n  __typename: string | null | void;\n}\n\nconst collectTypes = (obj: EntityLike | EntityLike[], types: string[] = []) => {\n  if (Array.isArray(obj)) {\n    obj.forEach(inner => {\n      collectTypes(inner, types);\n    });\n  } else if (typeof obj === 'object' && obj !== null) {\n    for (const key in obj) {\n      if (key === '__typename' && typeof obj[key] === 'string') {\n        types.push(obj[key] as string);\n      } else {\n        collectTypes(obj[key], types);\n      }\n    }\n  }\n\n  return types;\n};\n\nexport const collectTypesFromResponse = (response: object) =>\n  collectTypes(response as EntityLike).filter((v, i, a) => a.indexOf(v) === i);\n\nconst formatNode = (node: FieldNode | InlineFragmentNode) => {\n  if (\n    node.selectionSet &&\n    !node.selectionSet.selections.some(\n      node => node.kind === Kind.FIELD && node.name.value === '__typename'\n    )\n  ) {\n    // NOTE: It's fine to mutate here as long as we return the node,\n    // which will instruct visit() to clone the AST upwards\n    (node.selectionSet.selections as SelectionNode[]).push({\n      kind: Kind.FIELD,\n      name: {\n        kind: Kind.NAME,\n        value: '__typename',\n      },\n    });\n\n    return node;\n  }\n};\n\nexport const formatDocument = (node: DocumentNode) => {\n  return visit(node, {\n    Field: formatNode,\n    InlineFragment: formatNode,\n  });\n};\n","export const maskTypename = (data: any): any => {\n  if (!data || typeof data !== 'object') return data;\n\n  return Object.keys(data).reduce((acc, key: string) => {\n    const value = data[key];\n    if (key === '__typename') {\n      Object.defineProperty(acc, '__typename', {\n        enumerable: false,\n        value,\n      });\n    } else if (Array.isArray(value)) {\n      acc[key] = value.map(maskTypename);\n    } else if (value && typeof value === 'object' && '__typename' in value) {\n      acc[key] = maskTypename(value);\n    } else {\n      acc[key] = value;\n    }\n\n    return acc;\n  }, {});\n};\n","import { Source, pipe, toPromise, take } from 'wonka';\nimport { PromisifiedSource } from '../types';\n\nexport function withPromise<T>(source$: Source<T>): PromisifiedSource<T> {\n  (source$ as PromisifiedSource<T>).toPromise = () =>\n    pipe(source$, take(1), toPromise);\n  return source$ as PromisifiedSource<T>;\n}\n","export * from './error';\nexport * from './request';\nexport * from './result';\nexport * from './typenames';\nexport * from './toSuspenseSource';\nexport * from './stringifyVariables';\nexport * from './maskTypename';\nexport * from './withPromise';\n\nexport const noop = () => {\n  /* noop */\n};\n","import { GraphQLError } from 'graphql';\nimport { pipe, share, filter, merge, map, tap } from 'wonka';\nimport { Exchange, OperationResult, Operation } from '../types';\nimport { CombinedError } from '../utils';\n\nexport interface SerializedResult {\n  data?: any;\n  error?: {\n    graphQLErrors: Array<Partial<GraphQLError> | string>;\n    networkError?: string;\n  };\n}\n\nexport interface SSRData {\n  [key: string]: SerializedResult;\n}\n\nexport interface SSRExchangeParams {\n  isClient?: boolean;\n  initialState?: SSRData;\n}\n\nexport interface SSRExchange extends Exchange {\n  /** Rehydrates cached data */\n  restoreData(data: SSRData): void;\n  /** Extracts cached data */\n  extractData(): SSRData;\n}\n\nconst shouldSkip = ({ operationName }: Operation) =>\n  operationName !== 'subscription' && operationName !== 'query';\n\n/** Serialize an OperationResult to plain JSON */\nconst serializeResult = ({\n  data,\n  error,\n}: OperationResult): SerializedResult => {\n  const result: SerializedResult = { data, error: undefined };\n  if (error) {\n    result.error = {\n      graphQLErrors: error.graphQLErrors.map(error => {\n        if (!error.path && !error.extensions) return error.message;\n\n        return {\n          message: error.message,\n          path: error.path,\n          extensions: error.extensions,\n        };\n      }),\n      networkError: error.networkError ? '' + error.networkError : undefined,\n    };\n  }\n\n  return result;\n};\n\n/** Deserialize plain JSON to an OperationResult */\nconst deserializeResult = (\n  operation: Operation,\n  result: SerializedResult\n): OperationResult => {\n  const { error, data } = result;\n  const deserialized: OperationResult = {\n    operation,\n    data,\n    extensions: undefined,\n    error: error\n      ? new CombinedError({\n          networkError: error.networkError\n            ? new Error(error.networkError)\n            : undefined,\n          graphQLErrors:\n            error.graphQLErrors && error.graphQLErrors.length\n              ? error.graphQLErrors\n              : undefined,\n        })\n      : undefined,\n  };\n\n  return deserialized;\n};\n\n/** The ssrExchange can be created to capture data during SSR and also to rehydrate it on the client */\nexport const ssrExchange = (params?: SSRExchangeParams): SSRExchange => {\n  const data: SSRData = {};\n\n  const isCached = (operation: Operation) => {\n    return !shouldSkip(operation) && data[operation.key] !== undefined;\n  };\n\n  // The SSR Exchange is a temporary cache that can populate results into data for suspense\n  // On the client it can be used to retrieve these temporary results from a rehydrated cache\n  const ssr: SSRExchange = ({ client, forward }) => ops$ => {\n    // params.isClient tells us whether we're on the client-side\n    // By default we assume that we're on the client if suspense-mode is disabled\n    const isClient =\n      params && typeof params.isClient === 'boolean'\n        ? !!params.isClient\n        : !client.suspense;\n\n    const sharedOps$ = share(ops$);\n\n    let forwardedOps$ = pipe(\n      sharedOps$,\n      filter(op => !isCached(op)),\n      forward\n    );\n\n    // NOTE: Since below we might delete the cached entry after accessing\n    // it once, cachedOps$ needs to be merged after forwardedOps$\n    let cachedOps$ = pipe(\n      sharedOps$,\n      filter(op => isCached(op)),\n      map(op => {\n        const serialized = data[op.key];\n        return deserializeResult(op, serialized);\n      })\n    );\n\n    if (!isClient) {\n      // On the server we cache results in the cache as they're resolved\n      forwardedOps$ = pipe(\n        forwardedOps$,\n        tap((result: OperationResult) => {\n          const { operation } = result;\n          if (!shouldSkip(operation)) {\n            const serialized = serializeResult(result);\n            data[operation.key] = serialized;\n          }\n        })\n      );\n    } else {\n      // On the client we delete results from the cache as they're resolved\n      cachedOps$ = pipe(\n        cachedOps$,\n        tap((result: OperationResult) => {\n          delete data[result.operation.key];\n        })\n      );\n    }\n\n    return merge([forwardedOps$, cachedOps$]);\n  };\n\n  ssr.restoreData = (restore: SSRData) => Object.assign(data, restore);\n  ssr.extractData = () => Object.assign({}, data);\n\n  if (params && params.initialState) {\n    ssr.restoreData(params.initialState);\n  }\n\n  return ssr;\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, map, merge, pipe, share, tap } from 'wonka';\n\nimport { Client } from '../client';\nimport { Exchange, Operation, OperationResult, ExchangeInput } from '../types';\nimport {\n  addMetadata,\n  collectTypesFromResponse,\n  formatDocument,\n} from '../utils';\n\ntype ResultCache = Map<number, OperationResult>;\n\ninterface OperationCache {\n  [key: string]: Set<number>;\n}\n\nconst shouldSkip = ({ operationName }: Operation) =>\n  operationName !== 'mutation' && operationName !== 'query';\n\nexport const cacheExchange: Exchange = ({ forward, client, dispatchDebug }) => {\n  const resultCache = new Map() as ResultCache;\n  const operationCache = Object.create(null) as OperationCache;\n\n  // Adds unique typenames to query (for invalidating cache entries)\n  const mapTypeNames = (operation: Operation): Operation => ({\n    ...operation,\n    query: formatDocument(operation.query),\n  });\n\n  const handleAfterMutation = afterMutation(\n    resultCache,\n    operationCache,\n    client,\n    dispatchDebug\n  );\n\n  const handleAfterQuery = afterQuery(resultCache, operationCache);\n\n  const isOperationCached = operation => {\n    const {\n      key,\n      operationName,\n      context: { requestPolicy },\n    } = operation;\n    return (\n      operationName === 'query' &&\n      requestPolicy !== 'network-only' &&\n      (requestPolicy === 'cache-only' || resultCache.has(key))\n    );\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n\n    const cachedOps$ = pipe(\n      sharedOps$,\n      filter(op => !shouldSkip(op) && isOperationCached(op)),\n      map(operation => {\n        const cachedResult = resultCache.get(operation.key);\n\n        dispatchDebug({\n          operation,\n          ...(cachedResult\n            ? {\n                type: 'cacheHit',\n                message: 'The result was successfully retried from the cache',\n              }\n            : {\n                type: 'cacheMiss',\n                message: 'The result could not be retrieved from the cache',\n              }),\n        });\n\n        const result: OperationResult = {\n          ...cachedResult,\n          operation: addMetadata(operation, {\n            cacheOutcome: cachedResult ? 'hit' : 'miss',\n          }),\n        };\n\n        if (operation.context.requestPolicy === 'cache-and-network') {\n          result.stale = true;\n          reexecuteOperation(client, operation);\n        }\n\n        return result;\n      })\n    );\n\n    const forwardedOps$ = pipe(\n      merge([\n        pipe(\n          sharedOps$,\n          filter(op => !shouldSkip(op) && !isOperationCached(op)),\n          map(mapTypeNames)\n        ),\n        pipe(\n          sharedOps$,\n          filter(op => shouldSkip(op))\n        ),\n      ]),\n      map(op => addMetadata(op, { cacheOutcome: 'miss' })),\n      filter(\n        op =>\n          op.operationName !== 'query' ||\n          op.context.requestPolicy !== 'cache-only'\n      ),\n      forward,\n      tap(response => {\n        if (\n          response.operation &&\n          response.operation.operationName === 'mutation'\n        ) {\n          handleAfterMutation(response);\n        } else if (\n          response.operation &&\n          response.operation.operationName === 'query'\n        ) {\n          handleAfterQuery(response);\n        }\n      })\n    );\n\n    return merge([cachedOps$, forwardedOps$]);\n  };\n};\n\n// Reexecutes a given operation with the default requestPolicy\nconst reexecuteOperation = (client: Client, operation: Operation) => {\n  return client.reexecuteOperation({\n    ...operation,\n    context: {\n      ...operation.context,\n      requestPolicy: 'network-only',\n    },\n  });\n};\n\n// Invalidates the cache given a mutation's response\nexport const afterMutation = (\n  resultCache: ResultCache,\n  operationCache: OperationCache,\n  client: Client,\n  dispatchDebug: ExchangeInput['dispatchDebug']\n) => (response: OperationResult) => {\n  const pendingOperations = new Set<number>();\n  const { additionalTypenames } = response.operation.context;\n\n  const typenames = [\n    ...collectTypesFromResponse(response.data),\n    ...(additionalTypenames || []),\n  ];\n\n  dispatchDebug({\n    type: 'cacheInvalidation',\n    message: `The following typenames have been invalidated: ${typenames}`,\n    operation: response.operation,\n    data: { typenames, response },\n  });\n\n  typenames.forEach(typeName => {\n    const operations =\n      operationCache[typeName] || (operationCache[typeName] = new Set());\n    operations.forEach(key => {\n      pendingOperations.add(key);\n    });\n    operations.clear();\n  });\n\n  pendingOperations.forEach(key => {\n    if (resultCache.has(key)) {\n      const operation = (resultCache.get(key) as OperationResult).operation;\n      resultCache.delete(key);\n      reexecuteOperation(client, operation);\n    }\n  });\n};\n\n// Mark typenames on typenameInvalidate for early invalidation\nconst afterQuery = (\n  resultCache: ResultCache,\n  operationCache: OperationCache\n) => (response: OperationResult) => {\n  const { operation, data, error } = response;\n  const { additionalTypenames } = operation.context;\n\n  if (data === undefined || data === null) {\n    return;\n  }\n\n  resultCache.set(operation.key, { operation, data, error });\n\n  [\n    ...collectTypesFromResponse(response.data),\n    ...(additionalTypenames || []),\n  ].forEach(typeName => {\n    const operations =\n      operationCache[typeName] || (operationCache[typeName] = new Set());\n    operations.add(operation.key);\n  });\n};\n","import { pipe, tap } from 'wonka';\nimport { Exchange } from '../types';\n\nexport const debugExchange: Exchange = ({ forward }) => {\n  if (process.env.NODE_ENV === 'production') {\n    return ops$ => forward(ops$);\n  } else {\n    return ops$ =>\n      pipe(\n        ops$,\n        // eslint-disable-next-line no-console\n        tap(op => console.log('[Exchange debug]: Incoming operation: ', op)),\n        forward,\n        tap(result =>\n          // eslint-disable-next-line no-console\n          console.log('[Exchange debug]: Completed operation: ', result)\n        )\n      );\n  }\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { Exchange, Operation, OperationResult } from '../types';\n\n/** A default exchange for debouncing GraphQL requests. */\nexport const dedupExchange: Exchange = ({ forward, dispatchDebug }) => {\n  const inFlightKeys = new Set<number>();\n\n  const filterIncomingOperation = (operation: Operation) => {\n    const { key, operationName } = operation;\n    if (operationName === 'teardown') {\n      inFlightKeys.delete(key);\n      return true;\n    }\n\n    if (operationName !== 'query' && operationName !== 'subscription') {\n      return true;\n    }\n\n    const isInFlight = inFlightKeys.has(key);\n    inFlightKeys.add(key);\n\n    if (isInFlight) {\n      dispatchDebug({\n        type: 'dedup',\n        message: 'An operation has been deduped.',\n        operation,\n      });\n    }\n\n    return !isInFlight;\n  };\n\n  const afterOperationResult = ({ operation }: OperationResult) => {\n    inFlightKeys.delete(operation.key);\n  };\n\n  return ops$ => {\n    const forward$ = pipe(ops$, filter(filterIncomingOperation));\n    return pipe(forward(forward$), tap(afterOperationResult));\n  };\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, merge, mergeMap, pipe, share, takeUntil, onPush } from 'wonka';\n\nimport { Exchange } from '../types';\nimport {\n  makeFetchBody,\n  makeFetchURL,\n  makeFetchOptions,\n  makeFetchSource,\n} from '../internal';\n\n/** A default exchange for fetching GraphQL requests. */\nexport const fetchExchange: Exchange = ({ forward, dispatchDebug }) => {\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const fetchResults$ = pipe(\n      sharedOps$,\n      filter(operation => {\n        return (\n          operation.operationName === 'query' ||\n          operation.operationName === 'mutation'\n        );\n      }),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.operationName === 'teardown' && op.key === key)\n        );\n\n        const body = makeFetchBody(operation);\n        const url = makeFetchURL(operation, body);\n        const fetchOptions = makeFetchOptions(operation, body);\n\n        dispatchDebug({\n          type: 'fetchRequest',\n          message: 'A fetch request is being executed.',\n          operation,\n          data: {\n            url,\n            fetchOptions,\n          },\n        });\n\n        return pipe(\n          makeFetchSource(operation, url, fetchOptions),\n          takeUntil(teardown$),\n          onPush(result => {\n            const error = !result.data ? result.error : undefined;\n\n            dispatchDebug({\n              type: error ? 'fetchError' : 'fetchSuccess',\n              message: `A ${\n                error ? 'failed' : 'successful'\n              } fetch response has been returned.`,\n              operation,\n              data: {\n                url,\n                fetchOptions,\n                value: error || result,\n              },\n            });\n          })\n        );\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(operation => {\n        return (\n          operation.operationName !== 'query' &&\n          operation.operationName !== 'mutation'\n        );\n      }),\n      forward\n    );\n\n    return merge([fetchResults$, forward$]);\n  };\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { Operation, ExchangeIO, ExchangeInput } from '../types';\nimport { noop } from '../utils';\n\n/** This is always the last exchange in the chain; No operation should ever reach it */\nexport const fallbackExchange: ({\n  dispatchDebug,\n}: Pick<ExchangeInput, 'dispatchDebug'>) => ExchangeIO = ({\n  dispatchDebug,\n}) => ops$ =>\n  pipe(\n    ops$,\n    tap<Operation>(operation => {\n      if (\n        operation.operationName !== 'teardown' &&\n        process.env.NODE_ENV !== 'production'\n      ) {\n        const message = `No exchange has handled operations of type \"${operation.operationName}\". Check whether you've added an exchange responsible for these operations.`;\n\n        dispatchDebug({\n          type: 'fallbackCatch',\n          message,\n          operation,\n        });\n        console.warn(message);\n      }\n    }),\n    /* All operations that skipped through the entire exchange chain should be filtered from the output */\n    filter<any>(() => false)\n  );\n\nexport const fallbackExchangeIO: ExchangeIO = fallbackExchange({\n  dispatchDebug: noop,\n});\n","import { Exchange, ExchangeInput } from '../types';\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeExchanges = (exchanges: Exchange[]) => ({\n  client,\n  forward,\n  dispatchDebug,\n}: ExchangeInput) =>\n  exchanges.reduceRight(\n    (forward, exchange) =>\n      exchange({\n        client,\n        forward,\n        dispatchDebug(event) {\n          dispatchDebug({\n            ...event,\n            timestamp: Date.now(),\n            source: exchange.name,\n          });\n        },\n      }),\n    forward\n  );\n","export { ssrExchange } from './ssr';\nexport { cacheExchange } from './cache';\nexport { subscriptionExchange } from './subscription';\nexport { debugExchange } from './debug';\nexport { dedupExchange } from './dedup';\nexport { fetchExchange } from './fetch';\nexport { fallbackExchangeIO } from './fallback';\nexport { composeExchanges } from './compose';\n\nimport { cacheExchange } from './cache';\nimport { dedupExchange } from './dedup';\nimport { fetchExchange } from './fetch';\n\nexport const defaultExchanges = [dedupExchange, cacheExchange, fetchExchange];\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport {\n  filter,\n  makeSubject,\n  onEnd,\n  onStart,\n  pipe,\n  share,\n  Source,\n  take,\n  takeUntil,\n  merge,\n  interval,\n  fromValue,\n  switchMap,\n  publish,\n  subscribe,\n  map,\n  Subscription,\n} from 'wonka';\n\nimport { composeExchanges, defaultExchanges } from './exchanges';\nimport { fallbackExchange } from './exchanges/fallback';\n\nimport {\n  Exchange,\n  ExchangeInput,\n  GraphQLRequest,\n  Operation,\n  OperationContext,\n  OperationResult,\n  OperationType,\n  RequestPolicy,\n  PromisifiedSource,\n  DebugEvent,\n} from './types';\n\nimport {\n  createRequest,\n  toSuspenseSource,\n  withPromise,\n  maskTypename,\n  noop,\n} from './utils';\n\nimport { DocumentNode } from 'graphql';\n\n/** Options for configuring the URQL [client]{@link Client}. */\nexport interface ClientOptions {\n  /** Target endpoint URL such as `https://my-target:8080/graphql`. */\n  url: string;\n  /** Any additional options to pass to fetch. */\n  fetchOptions?: RequestInit | (() => RequestInit);\n  /** An alternative fetch implementation. */\n  fetch?: typeof fetch;\n  /** An ordered array of Exchanges. */\n  exchanges?: Exchange[];\n  /** Activates support for Suspense. */\n  suspense?: boolean;\n  /** The default request policy for requests. */\n  requestPolicy?: RequestPolicy;\n  /** Use HTTP GET for queries. */\n  preferGetMethod?: boolean;\n  /** Mask __typename from results. */\n  maskTypename?: boolean;\n}\n\ninterface ActiveOperations {\n  [operationKey: string]: number;\n}\n\nexport const createClient = (opts: ClientOptions) => new Client(opts);\n\n/** The URQL application-wide client library. Each execute method starts a GraphQL request and returns a stream of results. */\nexport class Client {\n  // Event target for monitoring\n  subscribeToDebugTarget?: (onEvent: (e: DebugEvent) => void) => Subscription;\n\n  // These are variables derived from ClientOptions\n  url: string;\n  fetch?: typeof fetch;\n  fetchOptions?: RequestInit | (() => RequestInit);\n  suspense: boolean;\n  preferGetMethod: boolean;\n  requestPolicy: RequestPolicy;\n  maskTypename: boolean;\n\n  // These are internals to be used to keep track of operations\n  dispatchOperation: (operation?: Operation) => void;\n  operations$: Source<Operation>;\n  results$: Source<OperationResult>;\n  activeOperations = Object.create(null) as ActiveOperations;\n  queue: Operation[] = [];\n\n  constructor(opts: ClientOptions) {\n    if (process.env.NODE_ENV !== 'production' && !opts.url) {\n      throw new Error('You are creating an urql-client without a url.');\n    }\n\n    let dispatchDebug: ExchangeInput['dispatchDebug'] = noop;\n    if (process.env.NODE_ENV !== 'production') {\n      const { next, source } = makeSubject<DebugEvent>();\n      this.subscribeToDebugTarget = (onEvent: (e: DebugEvent) => void) =>\n        pipe(source, subscribe(onEvent));\n      dispatchDebug = next as ExchangeInput['dispatchDebug'];\n    }\n\n    this.url = opts.url;\n    this.fetchOptions = opts.fetchOptions;\n    this.fetch = opts.fetch;\n    this.suspense = !!opts.suspense;\n    this.requestPolicy = opts.requestPolicy || 'cache-first';\n    this.preferGetMethod = !!opts.preferGetMethod;\n    this.maskTypename = !!opts.maskTypename;\n\n    // This subject forms the input of operations; executeOperation may be\n    // called to dispatch a new operation on the subject\n    const { source: operations$, next: nextOperation } = makeSubject<\n      Operation\n    >();\n    this.operations$ = operations$;\n\n    let isDispatching = false;\n    this.dispatchOperation = (operation?: Operation) => {\n      if (!isDispatching) {\n        isDispatching = true;\n        if (operation) nextOperation(operation);\n        let queued: Operation | void;\n        while ((queued = this.queue.shift())) nextOperation(queued);\n        isDispatching = false;\n      } else if (operation) {\n        nextOperation(operation);\n      }\n    };\n\n    const exchanges =\n      opts.exchanges !== undefined ? opts.exchanges : defaultExchanges;\n\n    // All exchange are composed into a single one and are called using the constructed client\n    // and the fallback exchange stream\n    const composedExchange = composeExchanges(exchanges);\n\n    // All exchanges receive inputs using which they can forward operations to the next exchange\n    // and receive a stream of results in return, access the client, or dispatch debugging events\n    // All operations then run through the Exchange IOs in a pipeline-like fashion\n    this.results$ = share(\n      composedExchange({\n        client: this,\n        dispatchDebug,\n        forward: fallbackExchange({ dispatchDebug }),\n      })(this.operations$)\n    );\n\n    // Prevent the `results$` exchange pipeline from being closed by active\n    // cancellations cascading up from components\n    pipe(this.results$, publish);\n  }\n\n  private createOperationContext = (\n    opts?: Partial<OperationContext>\n  ): OperationContext => ({\n    url: this.url,\n    fetchOptions: this.fetchOptions,\n    fetch: this.fetch,\n    preferGetMethod: this.preferGetMethod,\n    ...opts,\n    requestPolicy: (opts || {}).requestPolicy || this.requestPolicy,\n  });\n\n  createRequestOperation = (\n    type: OperationType,\n    request: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Operation => ({\n    key: request.key,\n    query: request.query,\n    variables: request.variables,\n    operationName: type,\n    context: this.createOperationContext(opts),\n  });\n\n  /** Counts up the active operation key and dispatches the operation */\n  private onOperationStart(operation: Operation) {\n    const { key } = operation;\n    this.activeOperations[key] = (this.activeOperations[key] || 0) + 1;\n    this.dispatchOperation(operation);\n  }\n\n  /** Deletes an active operation's result observable and sends a teardown signal through the exchange pipeline */\n  private onOperationEnd(operation: Operation) {\n    const { key } = operation;\n    const prevActive = this.activeOperations[key] || 0;\n    const newActive = (this.activeOperations[key] =\n      prevActive <= 0 ? 0 : prevActive - 1);\n\n    if (newActive <= 0) {\n      this.dispatchOperation({ ...operation, operationName: 'teardown' });\n    }\n  }\n\n  /** Executes an Operation by sending it through the exchange pipeline It returns an observable that emits all related exchange results and keeps track of this observable's subscribers. A teardown signal will be emitted when no subscribers are listening anymore. */\n  executeRequestOperation(operation: Operation): Source<OperationResult> {\n    const { key, operationName } = operation;\n    let operationResults$ = pipe(\n      this.results$,\n      filter((res: OperationResult) => res.operation.key === key)\n    );\n\n    if (this.maskTypename) {\n      operationResults$ = pipe(\n        operationResults$,\n        map(res => {\n          res.data = maskTypename(res.data);\n          return res;\n        })\n      );\n    }\n\n    if (operationName === 'mutation') {\n      // A mutation is always limited to just a single result and is never shared\n      return pipe(\n        operationResults$,\n        onStart<OperationResult>(() => this.dispatchOperation(operation)),\n        take(1)\n      );\n    }\n\n    const teardown$ = pipe(\n      this.operations$,\n      filter(\n        (op: Operation) => op.operationName === 'teardown' && op.key === key\n      )\n    );\n\n    const result$ = pipe(\n      operationResults$,\n      takeUntil(teardown$),\n      onStart<OperationResult>(() => {\n        this.onOperationStart(operation);\n      }),\n      onEnd<OperationResult>(() => {\n        this.onOperationEnd(operation);\n      })\n    );\n\n    return operation.context.suspense !== false &&\n      this.suspense &&\n      operationName === 'query'\n      ? toSuspenseSource<OperationResult>(result$ as Source<OperationResult>)\n      : (result$ as Source<OperationResult>);\n  }\n\n  reexecuteOperation = (operation: Operation) => {\n    // Reexecute operation only if any subscribers are still subscribed to the\n    // operation's exchange results\n    if ((this.activeOperations[operation.key] || 0) > 0) {\n      this.queue.push(operation);\n      this.dispatchOperation();\n    }\n  };\n\n  query<Data = any, Variables extends object = {}>(\n    query: DocumentNode | string,\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ): PromisifiedSource<OperationResult<Data>> {\n    if (!context || typeof context.suspense !== 'boolean') {\n      context = { ...context, suspense: false };\n    }\n\n    return withPromise<OperationResult<Data>>(\n      this.executeQuery(createRequest(query, variables), context)\n    );\n  }\n\n  readQuery<Data = any, Variables extends object = {}>(\n    query: DocumentNode | string,\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResult<Data> | null {\n    let result: OperationResult<Data> | null = null;\n\n    pipe(\n      this.executeQuery(createRequest(query, variables), context),\n      subscribe(res => {\n        result = res;\n      })\n    ).unsubscribe();\n\n    return result;\n  }\n\n  executeQuery = <Data = any>(\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult<Data>> => {\n    const operation = this.createRequestOperation('query', query, opts);\n    const response$ = this.executeRequestOperation(operation);\n    const { pollInterval } = operation.context;\n\n    if (pollInterval) {\n      return pipe(\n        merge([fromValue(0), interval(pollInterval)]),\n        switchMap(() => response$)\n      );\n    }\n\n    return response$;\n  };\n\n  executeSubscription = (\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult> => {\n    const operation = this.createRequestOperation('subscription', query, opts);\n    return this.executeRequestOperation(operation);\n  };\n\n  mutation<Data = any, Variables extends object = {}>(\n    query: DocumentNode | string,\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ): PromisifiedSource<OperationResult<Data>> {\n    return withPromise<OperationResult<Data>>(\n      this.executeMutation(createRequest(query, variables), context)\n    );\n  }\n\n  executeMutation = <Data = any>(\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult<Data>> => {\n    const operation = this.createRequestOperation('mutation', query, opts);\n    return this.executeRequestOperation(operation);\n  };\n}\n","import { pipe, share, onPush, toPromise, takeWhile, take, Source } from 'wonka';\n\n/** This converts a Source to a suspense Source; It will forward the first result synchronously or throw a promise that resolves when the result becomes available */\nexport const toSuspenseSource = <T>(source: Source<T>): Source<T> => sink => {\n  const shared = share(source);\n  let hasResult = false;\n  let hasSuspended = false;\n\n  pipe(\n    shared,\n    takeWhile(() => !hasSuspended),\n    onPush(() => (hasResult = true))\n  )(sink);\n\n  if (!hasResult) {\n    hasSuspended = true;\n    sink(0); /* End */\n    throw pipe(shared, take(1), toPromise);\n  }\n};\n","import { print } from 'graphql';\n\nimport {\n  filter,\n  make,\n  merge,\n  mergeMap,\n  pipe,\n  share,\n  Source,\n  takeUntil,\n} from 'wonka';\n\nimport { makeResult, makeErrorResult } from '../utils';\n\nimport {\n  Exchange,\n  ExecutionResult,\n  Operation,\n  OperationContext,\n  OperationResult,\n} from '../types';\n\nexport interface ObserverLike<T> {\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\n/** An abstract observable interface conforming to: https://github.com/tc39/proposal-observable */\nexport interface ObservableLike<T> {\n  subscribe(\n    observer: ObserverLike<T>\n  ): {\n    unsubscribe: () => void;\n  };\n}\n\nexport interface SubscriptionOperation {\n  query: string;\n  variables?: object;\n  key: string;\n  context: OperationContext;\n}\n\nexport type SubscriptionForwarder = (\n  operation: SubscriptionOperation\n) => ObservableLike<ExecutionResult & { extensions?: Record<string, any> }>;\n\n/** This is called to create a subscription and needs to be hooked up to a transport client. */\nexport interface SubscriptionExchangeOpts {\n  // This has been modelled to work with subscription-transport-ws\n  // See: https://github.com/apollographql/subscriptions-transport-ws#requestoptions--observableexecutionresult-returns-observable-to-execute-the-operation\n  forwardSubscription: SubscriptionForwarder;\n\n  /** This flag may be turned on to allow your subscriptions-transport to handle all operation types */\n  enableAllOperations?: boolean;\n}\n\nexport const subscriptionExchange = ({\n  forwardSubscription,\n  enableAllOperations,\n}: SubscriptionExchangeOpts): Exchange => ({ client, forward }) => {\n  const createSubscriptionSource = (\n    operation: Operation\n  ): Source<OperationResult> => {\n    // This excludes the query's name as a field although subscription-transport-ws does accept it since it's optional\n    const observableish = forwardSubscription({\n      key: operation.key.toString(36),\n      query: print(operation.query),\n      variables: operation.variables,\n      context: { ...operation.context },\n    });\n\n    return make<OperationResult>(({ next, complete }) => {\n      let isComplete = false;\n      let sub;\n\n      Promise.resolve().then(() => {\n        if (isComplete) return;\n\n        sub = observableish.subscribe({\n          next: result => next(makeResult(operation, result)),\n          error: err => next(makeErrorResult(operation, err)),\n          complete: () => {\n            if (!isComplete) {\n              isComplete = true;\n              if (operation.operationName === 'subscription') {\n                client.reexecuteOperation({\n                  ...operation,\n                  operationName: 'teardown',\n                });\n              }\n\n              complete();\n            }\n          },\n        });\n      });\n\n      return () => {\n        isComplete = true;\n        if (sub) sub.unsubscribe();\n      };\n    });\n  };\n\n  const isSubscriptionOperation = (operation: Operation): boolean => {\n    const { operationName } = operation;\n    return (\n      operationName === 'subscription' ||\n      (!!enableAllOperations &&\n        (operationName === 'query' || operationName === 'mutation'))\n    );\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const subscriptionResults$ = pipe(\n      sharedOps$,\n      filter(isSubscriptionOperation),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.operationName === 'teardown' && op.key === key)\n        );\n\n        return pipe(createSubscriptionSource(operation), takeUntil(teardown$));\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(op => !isSubscriptionOperation(op)),\n      forward\n    );\n\n    return merge([subscriptionResults$, forward$]);\n  };\n};\n"],"names":["phash","h","x","i","l","hashQuery","q","hash","docs","Object","createRequest","vars","key","undefined","parse","print","query","stringifyVariables","variables","addMetadata","source","meta","_extends","context","collectTypes","obj","types","Array","inner","const","v","a","collectTypesFromResponse","response","node","Kind","formatNode","kind","name","value","formatDocument","visit","Field","InlineFragment","maskTypename","data","acc","enumerable","source$","toPromise","take","noop","shouldSkip","operationName","error","message","path","extensions","operation","op","cacheOutcome","cacheExchange","cachedResult","resultCache","dispatchDebug","type","result","reexecuteOperation","client","isOperationCached","handleAfterMutation","handleAfterQuery","Map","mapTypeNames","afterMutation","operationCache","afterQuery","requestPolicy","ops$","sharedOps$","share","map","filter","tap","forward","merge","cachedOps$","forwardedOps$","pendingOperations","Set","additionalTypenames","typenames","typeName","console","dedupExchange","inFlightKeys","filterIncomingOperation","isInFlight","afterOperationResult","forward$","fetchExchange","mergeMap","teardown$","body","makeFetchBody","url","makeFetchURL","fetchOptions","makeFetchOptions","onPush","takeUntil","makeFetchSource","fetchResults$","fallbackExchange","process","fallbackExchangeIO","composeExchanges","exchanges","exchange","event","timestamp","Date","defaultExchanges","Client","opts","this","fetch","preferGetMethod","request","response$","switchMap","fromValue","interval","pollInterval","Error","makeSubject","onEvent","subscribe","next","isDispatching","nextOperation","queued","composedExchange","prevActive","res","operationResults$","onStart","onEnd","sink","shared","hasResult","hasSuspended","takeWhile","toSuspenseSource","result$","suspense","withPromise","params","isCached","deserialized","CombinedError","networkError","graphQLErrors","deserializeResult","serialized","serializeResult","ssr","isClient","restore","enableAllOperations","isSubscriptionOperation","createSubscriptionSource","observableish","forwardSubscription","make","makeResult","err","makeErrorResult","isComplete","complete","sub","subscriptionResults$"],"mappings":"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"}